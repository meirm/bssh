#!/usr/bin/perl
# this script wrote on perl. it get file called NODES with IP of servers
# and execude SSH command. the command running in with fork.
#
# Created by Meir Michanie, meirm @ riunx.com
# date      : 03/04/2006
#
use strict;
use warnings;
use FindBin;
use lib ("$FindBin::Bin/../lib");
use bcommon;
use Getopt::Long qw(:config pass_through);  # Add pass_through to handle unrecognized options

# Define variables for options
my $dryrun = 0;
my $sshoptions = '';
my $nodesfile = '';
my $help = 0;
my $init = 0;
my $list = 0;

# Parse only the tool's known options, not processing anything unrecognized
GetOptions(
    "dry-run" => \$dryrun,
    "sshoptions=s" => \$sshoptions,
    "nodes=s" => \$nodesfile,
    "h|help" => \$help,
    "i|init" => \$init,
    "ls" => \$list
);

# Handle help option
&help if $help;
&help unless @ARGV or $list;

# Handle init option
&binit if $init;

# Process SSH parameters
my @SSHPARAMS = &readsshparamsfile();

# Add any additional SSH options if provided
push (@SSHPARAMS, split(/\s+/, $sshoptions)) if $sshoptions;

# Fetch nodes from the specified file or default
my @NODES = ();
if ($nodesfile) {
    @NODES = &fetchnodes($nodesfile);
} else {
    @NODES = &fetchnodes();
}

$|++;

# List nodes if requested and exit
if ($list) {
    &list(@NODES);
    exit 0;
}



my @cmd=("ssh");
push @cmd, @SSHPARAMS if @SSHPARAMS;

foreach(@NODES){
		chomp ;
		my $host=$_;
		print "<$host>\n";
		if ($dryrun){
			print STDERR  join (" ",@cmd,$host,@ARGV), "\n";
		}else{
			system (@cmd,$host,@ARGV);
		}
		print "</$host>\n";
}
exit 0;

sub help(){
    print "Usage:\n";
    print "$0 [--nodes <nodesfile>] [--dry-run] [--sshoptions \"options\"] <command> [args...]\n";
    print "$0 [--nodes <nodesfile>] -ls    # List all available nodes\n";
    exit 0;
}
