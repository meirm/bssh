#!/usr/bin/perl
# this script wrote on perl. it get file called NODES with IP of servers
# and execude SSH command. the command running in with fork.
#
# Created by Meir Michanie, meirm @ riunx.com
# date      : 03/04/2006
#
use strict;
use warnings;
use FindBin;
use lib ("$FindBin::Bin/../lib");
use bcommon;
use Getopt::Long qw(:config no_pass_through);

# Manual argument processing to separate bsshs options from command
my @bsshs_args;
my @remote_cmd;
my $cmd_section = 0;

# Process each argument
for (my $i = 0; $i < @ARGV; $i++) {
    # If we see a --, everything after is command for remote host
    if ($ARGV[$i] eq '--') {
        $cmd_section = 1;
        next;
    }
    
    # If we're already in command section
    if ($cmd_section ){
        push @remote_cmd, $ARGV[$i];
    } else {
        push @bsshs_args, $ARGV[$i];
    }
}

# Replace ARGV with just the bsshs arguments for Getopt::Long
@ARGV = @bsshs_args;

# Define variables for options
my $dryrun = 0;
my $sshoptions = '';
my $nodesfile = '';
my $help = 0;
my $init = 0;
my $list = 0;

# Parse only the tool's known options
GetOptions(
    "dry-run" => \$dryrun,
    "sshoptions=s" => \$sshoptions,
    "nodes=s" => \$nodesfile,
    "h|help" => \$help,
    "i|init" => \$init,
    "ls" => \$list
);

# Handle help option
&help if $help;
&help unless @remote_cmd or $list;

# Handle init option
&binit if $init;

# Process SSH parameters
my @SSHPARAMS = &readsshparamsfile();

# Add any additional SSH options if provided
push (@SSHPARAMS, split(/\s+/, $sshoptions)) if $sshoptions;

# Fetch nodes from the specified file or default
my @NODES = ();
if ($nodesfile) {
    @NODES = &fetchnodes($nodesfile);
} else {
    @NODES = &fetchnodes();
}

$|++;

# List nodes if requested and exit
if ($list) {
    &list(@NODES);
    exit 0;
}



my @cmd = ("ssh");
push @cmd, @SSHPARAMS if @SSHPARAMS;

foreach my $host (@NODES) {
    chomp $host;
    print "<$host>\n";
    
    if ($dryrun) {
        print STDERR join(" ", @cmd, $host, @remote_cmd), "\n";
    } else {
        system(@cmd, $host, @remote_cmd);
    }
    print "</$host>\n";
}
exit 0;

sub help() {
    print "Usage:\n";
    print "$0 [bsshs options] [\@tag] [--] command [args...]\n";
    print "Options:\n";
    print "  --nodes <nodesfile>  Use alternative nodes file\n";
    print "  --dry-run            Show commands without executing them\n";
    print "  --sshoptions \"opts\"  Pass additional options to SSH\n";
    print "  -ls                  List all available nodes\n";
    print "  --                   Mark end of bsshs options\n";
    exit 0;
}
