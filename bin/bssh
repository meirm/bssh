#!/usr/bin/perl
# this script wrote on perl. it get file called NODES with IP of servers
# and execude SSH command. the command running in with fork.
#
# Created by Meir Michanie, meirm @ riunx.com
# date      : 03/04/2006
#
# Version 2011.01
#
=head1 Wed Jul 13 2011 C<bssh>
 
 BSSH:

 This suite allows you to run multiple processes across the network.

=head1 Nodes file format:

 localhost:all
 192.168.4.100:wawa,all
 192.168.4.101:wawa,all

=head1 Usage:

 bssh [--sshoptions [options]] @<group> ... [@<group>] -ls	# list all nodes in groups
 bssh [--sshoptions [options]] @<group> <command>	# execute command on all nodes of group <group>
 bssh [--sshoptions [options]] <host>: [<host>:] <command>	# execute command on specific node
 bssh [--sshoptions [options]] @<group> -<host>: <command>	# execute command on group besides specific node

=over 2

=item *

=item *


=cut
use strict;
use FindBin;
use lib ("$FindBin::Bin/../lib");
use bcommon;
use Getopt::Long qw(:config pass_through);  # Add pass_through to handle unrecognized options

# Define variables for options
my $dryrun = 0;
my $sshoptions = '';
my $nodesfile = '';
my $help = 0;
my $init = 0;
my $list = 0;

# Parse only the tool's known options, not processing anything unrecognized
GetOptions(
    "dry-run" => \$dryrun,
    "sshoptions=s" => \$sshoptions,
    "nodes=s" => \$nodesfile,
    "h|help" => \$help,
    "i|init" => \$init,
    "ls" => \$list
);

# Handle help option
&help if $help;
&help unless @ARGV or $list;

# Handle init option
&binit if $init;

# Process SSH parameters
my @SSHPARAMS = &readsshparamsfile();

# Add any additional SSH options if provided
push (@SSHPARAMS, split(/\s+/, $sshoptions)) if $sshoptions;

# Fetch nodes from the specified file or default
my @NODES = ();
if ($nodesfile) {
    @NODES = &fetchnodes($nodesfile);
} else {
    @NODES = &fetchnodes();
}

$|++;

# List nodes if requested and exit
if ($list) {
    &list(@NODES);
    exit 0;
}
sub help(){
        print "Usage:\n";
        print "$0 <command> [argument1]...[argument2]\n";
        exit 0;
}

my @CHILD;
foreach(@NODES){
		chomp ;
		my $host=$_;
		my $chpid=fork();
		unless ($chpid){ #child
			if ($dryrun){
				print STDERR "ssh ". join (" ",@SSHPARAMS)  . " $host ". join (" ",@ARGV)  , "\n";
			}else{
				open (BSSH, "ssh ". join (" ",@SSHPARAMS)  . " $host ". join (" ",@ARGV) . "|") || print "$host: bssh failed\n" && exit 1 ;
				while (<BSSH>){
					print "$host: $_";
				}
				close (BSSH);
				exit 0;
			}
		}else{ # parent
			push @CHILD, $chpid;
		}
}
&waitbchild(@CHILD); 
exit 0;
